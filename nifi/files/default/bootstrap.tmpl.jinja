########################################################################
# File managed by Salt at <{{ source }}>.
# Your changes will be overwritten.
########################################################################
#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Java command to use when running NiFi
java={{ nifi.bootstrap['java'] }}

# Username to use when running NiFi. This value will be ignored on Windows.
run.as={{ nifi.bootstrap['run.as'] }}

# Configure where NiFi's lib and conf directories live
lib.dir={{ nifi.bootstrap['lib.dir'] }}
conf.dir={{ nifi.bootstrap['conf.dir'] }}

# How long to wait after telling NiFi to shutdown before explicitly killing the Process
graceful.shutdown.seconds={{ nifi.bootstrap['graceful.shutdown.seconds'] }}

# Disable JSR 199 so that we can use JSP's without running a JDK
java.arg.1={{ nifi.bootstrap['java.arg.1'] }}

# JVM memory settings
java.arg.2={{ nifi.bootstrap['java.arg.2'] }}
java.arg.3={{ nifi.bootstrap['java.arg.3'] }}

# Enable Remote Debugging
#java.arg.debug=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000

java.arg.4={{ nifi.bootstrap['java.arg.4'] }}

# allowRestrictedHeaders is required for Cluster/Node communications to work properly
java.arg.5={{ nifi.bootstrap['java.arg.5'] }}
java.arg.6={{ nifi.bootstrap['java.arg.6'] }}

# The G1GC is known to cause some problems in Java 8 and earlier, but the issues were addressed in Java 9. If using Java 8 or earlier,
# it is recommended that G1GC not be used, especially in conjunction with the Write Ahead Provenance Repository. However, if using a newer
# version of Java, it can result in better performance without significant "stop-the-world" delays.
#java.arg.13=-XX:+UseG1GC

#Set headless mode by default
java.arg.14={{ nifi.bootstrap['java.arg.14'] }}

# Master key in hexadecimal format for encrypted sensitive configuration values
nifi.bootstrap.sensitive.key={{ nifi.bootstrap['nifi.bootstrap.sensitive.key'] }}

# Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs
java.arg.15={{ nifi.bootstrap['java.arg.15'] }}

# Requires JAAS to use only the provided JAAS configuration to authenticate a Subject, without using any "fallback" methods (such as prompting for username/password)
# Please see https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html, section "EXCEPTIONS TO THE MODEL"
java.arg.16={{ nifi.bootstrap['java.arg.16'] }}

# Zookeeper 3.5 now includes an Admin Server that starts on port 8080, since NiFi is already using that port disable by default.
# Please see https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config for configuration options.
java.arg.17.={{ nifi.bootstrap['java.arg.17'] }}

###
# Notification Services for notifying interested parties when NiFi is stopped, started, dies
###

# XML File that contains the definitions of the notification services
notification.services.file={{ nifi.bootstrap['notification.services.file'] }}

# In the case that we are unable to send a notification for an event, how many times should we retry?
notification.max.attempts={{ nifi.bootstrap['notification.max.attempts'] }}

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is started?
#nifi.start.notification.services=email-notification

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi is stopped?
#nifi.stop.notification.services=email-notification

# Comma-separated list of identifiers that are present in the notification.services.file; which services should be used to notify when NiFi dies?
#nifi.dead.notification.services=email-notification
