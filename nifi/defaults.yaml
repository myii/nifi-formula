# -*- coding: utf-8 -*-
# vim: ft=yaml
---
nifi:

  pkg:
    name: nifi
    downloadurl: >
      https://mirror.csclub.uwaterloo.ca/apache/nifi/1.11.4/nifi-1.11.4-bin.tar.gz
    version: 1.11.4
    installdir: /opt

    # Options for OpenJDK. Version must match exact package name on system.
    javajdk: true
    javajdkversion: 8

  systemdconfig:
    user: root
    group: root
    limitnofile: 50000
    limitnproc: 10000

  rootgroup: root
  config: 'nifi.properties'
  service:
    name: nifi

  # This section is the main nifi.properties file configuration
  # Core Properties #
  nifi:
    flow.configuration.file: ./conf/flow.xml.gz
    flow.configuration.archive.enabled: 'true'
    flow.configuration.archive.dir: ./conf/archive/
    flow.configuration.archive.max.time: '30 days'
    flow.configuration.archive.max.storage: '500 MB'
    flow.configuration.archive.max.count: ''
    flowcontroller.autoResumeState: 'true'
    flowcontroller.graceful.shutdown.period: '10 sec'
    flowservice.writedelay.interval: '500 ms'
    administrative.yield.duration: '30 sec'
    # If a component has no work to do (is "bored"),
    # how long should we wait before checking again for work?
    bored.yield.duration: '10 millis'
    queue.backpressure.count: 10000
    queue.backpressure.size: '1 GB'

    authorizer.configuration.file: ./conf/authorizers.xml
    login.identity.provider.configuration.file: ./conf/login-identity-providers.xml
    templates.directory: ./conf/templates
    ui.banner.text: ''
    ui.autorefresh.interval: '30 sec'
    nar.library.directory: ./lib
    nar.library.autoload.directory: ./extensions
    nar.working.directory: ./work/nar/
    documentation.working.directory: ./work/docs/components

    ####################
    ####################
    state.management.configuration.file: ./conf/state-management.xml
    # The ID of the local state provider
    state.management.provider.local: local-provider
    # The ID of the cluster-wide state provider.
    # This will be ignored if NiFi is not clustered
    # but must be populated if running in a cluster.
    state.management.provider.cluster: zk-provider
    # Specifies whether or not this instance of
    # NiFi should run an embedded ZooKeeper server
    state.management.embedded.zookeeper.start: 'false'
    # Properties file that provides the ZooKeeper
    # properties to use if <state.management.embedded.zookeeper.start> is set to true
    state.management.embedded.zookeeper.properties: ./conf/zookeeper.properties


    # H2 Settings
    database.directory: ./database_repository
    h2.url.append: ';LOCK_TIMEOUT=25000;WRITE_DELAY=0;AUTO_SERVER=FALSE'

    # FlowFile Repository
    flowfile.repository.implementation: >
      org.apache.nifi.controller.repository.WriteAheadFlowFileRepository
    flowfile.repository.wal.implementation: >
      org.apache.nifi.wali.SequentialAccessWriteAheadLog
    flowfile.repository.directory: ./flowfile_repository
    flowfile.repository.partitions: 256
    flowfile.repository.checkpoint.interval: '2 mins'
    flowfile.repository.always.sync: 'false'
    flowfile.repository.encryption.key.provider.implementation: ''
    flowfile.repository.encryption.key.provider.location: ''
    flowfile.repository.encryption.key.id: ''
    flowfile.repository.encryption.key: ''

    swap.manager.implementation: org.apache.nifi.controller.FileSystemSwapManager
    queue.swap.threshold: 20000
    swap.in.period: '5 sec'
    swap.in.threads: 1
    swap.out.period: '5 sec'
    swap.out.threads: 4

    # Content Repository
    content.repository.implementation: >
      org.apache.nifi.controller.repository.FileSystemRepository
    content.claim.max.appendable.size: 1 MB
    content.claim.max.flow.files: 100
    content.repository.directory.default: ./content_repository
    content.repository.archive.max.retention.period: '12 hours'
    content.repository.archive.max.usage.percentage: '50%'
    content.repository.archive.enabled: 'true'
    content.repository.always.sync: 'false'
    content.viewer.url: '../nifi-content-viewer/'
    content.repository.encryption.key.provider.implementation: ''
    content.repository.encryption.key.provider.location: ''
    content.repository.encryption.key.id: ''
    content.repository.encryption.key: ''

    # Provenance Repository Properties
    provenance.repository.implementation: >
      org.apache.nifi.provenance.WriteAheadProvenanceRepository
    provenance.repository.debug.frequency: '1_000_000'
    provenance.repository.encryption.key.provider.implementation: ''
    provenance.repository.encryption.key.provider.location: ''
    provenance.repository.encryption.key.id: ''
    provenance.repository.encryption.key: ''

    # Persistent Provenance Repository Properties
    provenance.repository.directory.default: ./provenance_repository
    provenance.repository.max.storage.time: '24 hours'
    provenance.repository.max.storage.size: '1 GB'
    provenance.repository.rollover.time: '30 secs'
    provenance.repository.rollover.size: '100 MB'
    provenance.repository.query.threads: 2
    provenance.repository.index.threads: 2
    provenance.repository.compress.on.rollover: 'true'
    provenance.repository.always.sync: 'false'
    # Comma-separated list of fields. Fields that are not indexed
    # will not be searchable.
    # Valid fields are:
    # EventType, FlowFileUUID, Filename, TransitURI, ProcessorID,
    # AlternateIdentifierURI, Relationship, Details
    provenance.repository.indexed.fields: >
      'EventType, FlowFileUUID, Filename, ProcessorID, Relationship'
    # FlowFile Attributes that should be indexed and made searchable.
    # Some examples to consider are filename, uuid, mime.type
    provenance.repository.indexed.attributes: ''
    # Large values for the shard size will result
    # in more Java heap usage when searching the Provenance Repository
    # but should provide better performance
    provenance.repository.index.shard.size: '500 MB'
    # Indicates the maximum length that a FlowFile attribute
    # can be when retrieving a Provenance Event from
    # the repository. If the length of any attribute exceeds
    # this value, it will be truncated when the event is retrieved.
    provenance.repository.max.attribute.length: 65536
    provenance.repository.concurrent.merge.threads: 2


    # Volatile Provenance Respository Properties
    provenance.repository.buffer.size: 100000

    # Component Status Repository
    components.status.repository.implementation: >
      org.apache.nifi.controller.status.history.VolatileComponentStatusRepository
    components.status.repository.buffer.size: 1440
    components.status.snapshot.frequency: 1 min

    # Site to Site properties
    remote.input.host: ''
    remote.input.secure: 'false'
    remote.input.socket.port: ''
    remote.input.http.enabled: 'true'
    remote.input.http.transaction.ttl: '30 sec'
    remote.contents.cache.expiration: '30 secs'

    # web properties #
    web.war.directory: ./lib
    web.http.host: ''
    web.http.port: 8080
    web.http.network.interface.default: ''
    web.https.host: ''
    web.https.port: ''
    web.https.network.interface.default: ''
    web.jetty.working.directory: ./work/jetty
    web.jetty.threads: 200
    web.max.header.size: '16 KB'
    web.proxy.context.path: ''
    web.proxy.host: ''

    # security properties #
    sensitive.props.key: ''
    sensitive.props.key.protected: ''
    sensitive.props.algorithm: 'PBEWITHMD5AND256BITAES-CBC-OPENSSL'
    sensitive.props.provider: BC
    sensitive.props.additional.keys: ''

    security.keystore: ''
    security.keystoreType: ''
    security.keystorePasswd: ''
    security.keyPasswd: ''
    security.truststore: ''
    security.truststoreType: ''
    security.truststorePasswd: ''
    security.user.authorizer: managed-authorizer
    security.user.login.identity.provider: ''
    security.ocsp.responder.url: ''
    security.ocsp.responder.certificate: ''

    # OpenId Connect SSO Properties #
    security.user.oidc.discovery.url: ''
    security.user.oidc.connect.timeout: '5 secs'
    security.user.oidc.read.timeout: '5 secs'
    security.user.oidc.client.id: ''
    security.user.oidc.client.secret: ''
    security.user.oidc.preferred.jwsalgorithm: ''
    security.user.oidc.additional.scopes: ''
    security.user.oidc.claim.identifying.user: ''

    # Apache Knox SSO Properties #
    security.user.knox.url: ''
    security.user.knox.publicKey: ''
    security.user.knox.cookieName: hadoop-jwt
    security.user.knox.audiences: ''

    # Identity Mapping Properties #
    # These properties allow normalizing user identities
    # such that identities coming from different identity providers
    # (certificates, LDAP, Kerberos) can be treated the
    # same internally in  The following example demonstrates normalizing
    # DNs from certificates and principals from Kerberos into a common identity string:
    #
    # security.identity.mapping.pattern.dn: >
    # ^CN=(.*?), OU=(.*?), O=(.*?), L=(.*?), ST=(.*?), C=(.*?)$
    # security.identity.mapping.value.dn=$1@$2
    # security.identity.mapping.transform.dn=NONE
    # security.identity.mapping.pattern.kerb=^(.*?)/instance@(.*?)$
    # security.identity.mapping.value.kerb=$1@$2
    # security.identity.mapping.transform.kerb=UPPER

    # Group Mapping Properties #
    # These properties allow normalizing group names coming
    # from external sources like LDAP. The following example
    # lowercases any group name.
    #
    # security.group.mapping.pattern.anygroup=^(.*)$
    # security.group.mapping.value.anygroup=$1
    # security.group.mapping.transform.anygroup=LOWER

    # cluster common properties (all nodes must have same values) #
    cluster.protocol.heartbeat.interval: '5 sec'
    cluster.protocol.is.secure: 'false'

    # cluster node properties (only configure for cluster nodes) #
    cluster.is.node: 'false'
    cluster.node.address: ''
    cluster.node.protocol.port: ''
    cluster.node.protocol.threads: 10
    cluster.node.protocol.max.threads: 50
    cluster.node.event.history.size: 25
    cluster.node.connection.timeout: '5 sec'
    cluster.node.read.timeout: '5 sec'
    cluster.node.max.concurrent.requests: 100
    cluster.firewall.file: ''
    cluster.flow.election.max.wait.time: '5 mins'
    cluster.flow.election.max.candidates: ''

    # cluster load balancing properties #
    cluster.load.balance.host: ''
    cluster.load.balance.port: 6342
    cluster.load.balance.connections.per.node: 4
    cluster.load.balance.max.thread.count: 8
    cluster.load.balance.comms.timeout: '30 sec'

    # zookeeper properties, used for cluster management #
    zookeeper.connect.string: ''
    zookeeper.connect.timeout: '3 secs'
    zookeeper.session.timeout: '3 secs'
    zookeeper.root.node: '/nifi'

    # Zookeeper properties for the authentication scheme used when
    # creating acls on znodes used for cluster management
    # Values supported for zookeeper.auth.type are "default",
    # which will apply world/anyone rights on znodes
    # and "sasl" which will give rights to the sasl/kerberos
    # identity used to authenticate the nifi node
    # The identity is determined using the value in
    # kerberos.service.principal and the removeHostFromPrincipal
    # and removeRealmFromPrincipal values (which should align
    # with the kerberos.removeHostFromPrincipal and kerberos.removeRealmFromPrincipal
    # values configured on the zookeeper server).
    zookeeper.auth.type: ''
    zookeeper.kerberos.removeHostFromPrincipal: ''
    zookeeper.kerberos.removeRealmFromPrincipal: ''

    # kerberos #
    kerberos.krb5.file: ''

    # kerberos service principal #
    kerberos.service.principal: ''
    kerberos.service.keytab.location: ''

    # kerberos spnego principal #
    kerberos.spnego.principal: ''
    kerberos.spnego.keytab.location: ''
    kerberos.spnego.authentication.expiration: '12 hours'

    # external properties files for variable registry
    # supports a comma delimited list of file locations
    variable.registry.properties: ''

    # analytics properties #
    analytics.predict.enabled: 'false'
    analytics.predict.interval: '3 mins'
    analytics.query.interval: '5 mins'
    analytics.connection.model.implementation: >
      org.apache.nifi.controller.status.analytics.models.OrdinaryLeastSquares
    analytics.connection.model.score.name: rSquared
    analytics.connection.model.score.threshold: '.90'

  zookeeperproperties:
    initLimit: 10
    autopurge.purgeInterval: 24
    syncLimit: 5
    tickTime: 2000
    dataDir: ./state/zookeeper
    autopurge.snapRetainCount: 30

    # The server string has changed as of 3.5.5
    # and the client port is now specified at the end of the server string:
    # https://zookeeper.apache.org/doc/r3.5.5/zookeeperReconfig.html#sc_reconfig_clientport
    #
    # Specifies the servers that are part of this zookeeper ensemble. For
    # every NiFi instance running an embedded zookeeper, there needs to be
    # a server entry below. Client port is now specified at the end of the string
    # after a semi-colon.
    #
    # For instance:
    # To configure Zookeeper.properties set enabled to 'true' above,
    # and then define your Zookeeper servers here.
    # The hostname below needs to be the FQDN of the server.
    customservers:
      Node1:
        hostname: nifi-1.localdomain
        zookeeper_myid: 1
        zookeeper_clientPort: 2181
        zookeeper_peerPorts: '2888:3888'
      Node2:
        hostname: nifi-2.localdomain
        zookeeper_myid: 2
        zookeeper_clientPort: 2181
        zookeeper_peerPorts: '2888:3888'
      Node3:
        hostname: nifi-3.localdomain
        zookeeper_myid: 3
        zookeeper_clientPort: 2181
        zookeeper_peerPorts: '2888:3888'


  # Nifi Bootstrap Config File Defaults
  bootstrap:
    # Java command to use when running NiFi
    java: java

    # Username to use when running NiFi. This value will be ignored on Windows.
    run.as: ''

    # Configure where NiFi's lib and conf directories live
    lib.dir: ./lib
    conf.dir: ./conf

    # How long to wait after telling NiFi to
    # shutdown before explicitly killing the Process
    graceful.shutdown.seconds: 20

    # Disable JSR 199 so that we can use JSP's without running a JDK
    java.arg.1: '-Dorg.apache.jasper.compiler.disablejsr199=true'

    # JVM memory settings
    java.arg.2: '-Xms512m'
    java.arg.3: '-Xmx512m'

    java.arg.4: '-Djava.net.preferIPv4Stack=true'

    # allowRestrictedHeaders is required for
    # Cluster/Node communications to work properly
    java.arg.5: '-Dsun.net.http.allowRestrictedHeaders=true'
    java.arg.6: '-Djava.protocol.handler.pkgs=sun.net.www.protocol'

    # The G1GC is known to cause some problems in Java 8 and earlier,
    # but the issues were addressed in Java 9. If using Java 8 or earlier,
    # it is recommended that G1GC not be used, especially
    # in conjunction with the Write Ahead Provenance Repository.
    # However, if using a newer
    # version of Java, it can result in better performance without
    # significant "stop-the-world" delays.
    # java.arg.13=-XX:+UseG1GC

    # Set headless mode by default
    java.arg.14: '-Djava.awt.headless=true'

    # Master key in hexadecimal format for encrypted sensitive configuration values
    nifi.bootstrap.sensitive.key: ''

    # Sets the provider of SecureRandom to /dev/urandom to prevent blocking on VMs
    java.arg.15: '-Djava.security.egd=file:/dev/urandom'

    # Requires JAAS to use only the provided JAAS configuration
    # to authenticate a Subject, without using any "fallback" methods
    # (such as prompting for username/password)
    # Please see
    # https://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/single-signon.html,
    # section "EXCEPTIONS TO THE MODEL"
    java.arg.16: '-Djavax.security.auth.useSubjectCredsOnly=true'

    # Zookeeper 3.5 now includes an Admin Server that starts on port 8080,
    # since NiFi is already using that port disable by default.
    # Please see
    # https://zookeeper.apache.org/doc/current/zookeeperAdmin.html#sc_adminserver_config
    # for configuration options.
    java.arg.17: '-Dzookeeper.admin.enableServer=false'

    ###
    # Notification Services for notifying interested parties when NiFi is stopped,
    # started, dies
    ###

    # XML File that contains the definitions of the notification services
    notification.services.file: ./conf/bootstrap-notification-services.xml

    # In the case that we are unable to send a notification for an event,
    # how many times should we retry?
    notification.max.attempts: 5

  nifienv:
    # export JAVA_HOME=/usr/java/jdk1.8.0/
    exportJAVAHOME: /usr/lib/jvm/jre

    exportNIFIHOME: '$(cd "${SCRIPT_DIR}" && cd .. && pwd)'

    # The directory for the NiFi pid file
    exportNIFIPIDDIR: '"${NIFI_HOME}/run"'

    # The directory for NiFi log files
    exportNIFILOGDIR: '"${NIFI_HOME}/logs"'

    # Set to false to force the use of Keytab controller service in processors
    # that use Kerberos. If true, these processors will allow configuration of keytab
    # and principal directly within the processor. If false, these processors will be
    # invalid if attempting to configure these properties. This may be advantageous in
    # a multi-tenant environment where management of keytabs should be performed only by
    # a user with elevated permissions
    # (i.e., users that have been granted the 'ACCESS_KEYTAB'
    # restriction).
    exportNIFIALLOWEXPLICITKEYTAB: 'true'

  # Nifi State Management (state-management.xml) Config File Defaults
  # This is an XML code block. Ensure this is properly indented
  statemanagement: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <stateManagement>
        <local-provider>
            <id>local-provider</id>
            <class>org.apache.nifi.controller.state.providers.local.WriteAheadLocalStateProvider</class>
            <property name="Directory">./state/local</property>
            <property name="Always Sync">false</property>
            <property name="Partitions">16</property>
            <property name="Checkpoint Interval">2 mins</property>
        </local-provider>
        <cluster-provider>
            <id>zk-provider</id>
            <class>org.apache.nifi.controller.state.providers.zookeeper.ZooKeeperStateProvider</class>
            <property name="Connect String"></property>
            <property name="Root Node">/nifi</property>
            <property name="Session Timeout">10 seconds</property>
            <property name="Access Control">Open</property>
        </cluster-provider>
    </stateManagement>

  # Nifi Bootstrap Notifications Service Config File Defaults
  # This is an XML code block. Ensure this is properly indented
  bootstrapnotifications: |
    <?xml version="1.0"?>
    <services>
      <!-- Put your XML settings here. Indented.  -->
    </services>

  # Nifi Login Identify Providers Config File Defaults
  # This is an XML code block. Ensure this is properly indented
  loginidentityproviders: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <loginIdentityProviders>
      <!-- Put your XML settings here. Indented.  -->
    </loginIdentityProviders>

  # Nifi Login Identify Providers Config File Defaults
  # This is an XML code block. Ensure this is properly indented
  authorizers: |
    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
    <authorizers>
      <userGroupProvider>
        <identifier>file-user-group-provider</identifier>
        <class>org.apache.nifi.authorization.FileUserGroupProvider</class>
        <property name="Users File">./conf/users.xml</property>
        <property name="Legacy Authorized Users File"></property>

        <property name="Initial User Identity 1"></property>
      </userGroupProvider>
      <accessPolicyProvider>
        <identifier>file-access-policy-provider</identifier>
        <class>org.apache.nifi.authorization.FileAccessPolicyProvider</class>
        <property name="User Group Provider">file-user-group-provider</property>
        <property name="Authorizations File">./conf/authorizations.xml</property>
        <property name="Initial Admin Identity"></property>
        <property name="Legacy Authorized Users File"></property>
        <property name="Node Identity 1"></property>
        <property name="Node Group"></property>
      </accessPolicyProvider>
      <authorizer>
        <identifier>managed-authorizer</identifier>
        <class>org.apache.nifi.authorization.StandardManagedAuthorizer</class>
        <property name="Access Policy Provider">file-access-policy-provider</property>
      </authorizer>
    </authorizers>
